##ESTRUTURA DA APLICAÇÃO
-- Criação do projeto (e paralelamente conectando ao GitHub)
.yarn create next-app [nome do projeto]
.cd [nome do projeto]
.yarn dev (o yarn start nesse caso é para produção)
.commit inicial para subir o repositório no GitHub

next: 10.0.9
react: 17.0.1
react-dom: 17.0.1 (versões utilizadas pelo Diego)

-- Iniciando a criação do projeto Ignews 2.0
.arquivo Index.js é um componente chamado Home (homepage da nossa aplicação)
.Cada arquivo dentro da pasta Pages, acaba virando uma rota, menos o arquivo _app e _document. 
Arquivo chamado index, naturalmente será o arquivo principal da aplicação.

-- Adicionando typescript
.yarn add typescript @types/react @types/node -D
.Show, agora é trocar o nome dos arquivos p/ extensão do ts

-- Estilização com SASS
.Pasta styles - module.css é scoped
.Para utilizar junto, é necessária a instalação do sass [yarn add sass]. Com isso, é necessário 
trocar a nomeação do arquivo para home.module.scss e daí é possível utilizar o método cascata

-- Configuração externa
.file system rooting 
. O _app (MyApp) é o componente que fica 'por fora' de todas as páginas. Se quisermos algo que se repita em todas as páginas
colocaremos dentro desse arquivo. Ele vai ser recarregado toda vez que o usuário troca de página.
. O _document funciona de forma semelhante ao _app, porém, ele só é carregado uma única vez.
Ele pode ser comparado com o index.html no react.app

-- Title dinâmico por página
.Com a tag Head do 'next/head', é possível adicionar um <title> para qualquer página, diretamente do seu arquivo, e que
diretamente irá anexar à página principal. Dentro dessa <Head> é possível colocar <meta>'s e tudo mais. 
.A partir disso, é preciso colocá-los dentro de um react fragment.

-- Estilo Global da aplicação (interfere em toda aplicação)
.Mudança do nome do arquivo para global.scss -> chakra ui é bom nessa ajuda para cores 
. CSS NÃO pode importar dentro do document, porque o _document não tá pronto ainda para compilar css


##COMPONENTES E PÁGINAS
-- Componente Header
. O Next, nas páginas, nos obriga a utilizar o default para exportação, mas no caso dos componentes não iremos utilizar.
. O header fica por volta de tudo, já o div fica por volta do conteúdo "dentro" do header.
. As imagens no Next fica sempre dentro da pasta public, importando com o esquema padrão de '/'.
. Como o Header aparecerá em todas as páginas da aplicação, é de se colocar no arquivo _app.tsx

-- Componente SignIn 
. É interessante fazer outro arquivo, pois o seu funcionamento 'não interfere' no restante dos componentes do Header. 
Seu comportamento é isolado. Ao mudar, ele precisa ser renderizado novamente. Se ele estivesse conectado ao restante,
todos precisariam recarregar. 
. yarn add react-icons (utilizar o font awesome)
. A estilização da margin (left) do botão é no componente Header, pois ele está relacionado com os componentes desse componente
e não solto pela aplicação.

-- Página Home
. O botão subscribe now também será feito em um componente separado, porque terá conexão 
com o stripe para pagamentos e tudo mais, então com esse commit foi concluída a página home da
aplicação

-- Subscribe Button
. É o contexto que define os espaçamentos dentro dos elementos dentro dele.


## INTEGRAÇÃO COM API (STRIPE)
-- Configurando Stripe 
. Plataforma para pagamentos com cartão de crédito, com ambiente de homolagação bem rápido.
. A publishable key (desenvolvedores - chaves da API) é uma chave que é utilizada quando precisamos interagir com a 
API do stripe através do nosso frontend (para informações públicas)
. A secret key é [obviamente privada], com isso, caso em mãos erradas, a pessoa pode fazer de tudo na conta stripe,
até deletar os dados gerais da conta, por exemplo.

. .env.local - arquivo de variáveis ambiente, variáveis que são diferentes de acordo com o ambiente que a aplicação está 
rodando. Online, em testes, variando. 