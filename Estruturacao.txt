------------------------------------------FUNDAMENTOS DO NEXT.JS----------------------------------------------------------------------------------------------------------------------
## ESTRUTURA DA APLICAÇÃO
-- Criação do projeto (e paralelamente conectando ao GitHub)
.yarn create next-app [nome do projeto]
.cd [nome do projeto]
.yarn dev (o yarn start nesse caso é para produção)
.commit inicial para subir o repositório no GitHub

next: 10.0.9
react: 17.0.1
react-dom: 17.0.1 (versões utilizadas pelo Diego)

-- Iniciando a criação do projeto Ignews 2.0
.arquivo Index.js é um componente chamado Home (homepage da nossa aplicação)
.Cada arquivo dentro da pasta Pages, acaba virando uma rota, menos o arquivo _app e _document. 
Arquivo chamado index, naturalmente será o arquivo principal da aplicação.

-- Adicionando typescript
.yarn add typescript @types/react @types/node -D
.Show, agora é trocar o nome dos arquivos p/ extensão do ts

-- Estilização com SASS
.Pasta styles - module.css é scoped
.Para utilizar junto, é necessária a instalação do sass [yarn add sass]. Com isso, é necessário 
trocar a nomeação do arquivo para home.module.scss e daí é possível utilizar o método cascata

-- Configuração externa
.file system rooting 
. O _app (MyApp) é o componente que fica 'por fora' de todas as páginas. Se quisermos algo que se repita em todas as páginas
colocaremos dentro desse arquivo. Ele vai ser recarregado toda vez que o usuário troca de página.
. O _document funciona de forma semelhante ao _app, porém, ele só é carregado uma única vez.
Ele pode ser comparado com o index.html no react.app

-- Title dinâmico por página
.Com a tag Head do 'next/head', é possível adicionar um <title> para qualquer página, diretamente do seu arquivo, e que
diretamente irá anexar à página principal. Dentro dessa <Head> é possível colocar <meta>'s e tudo mais. 
.A partir disso, é preciso colocá-los dentro de um react fragment.

-- Estilo Global da aplicação (interfere em toda aplicação)
.Mudança do nome do arquivo para global.scss -> chakra ui é bom nessa ajuda para cores 
. CSS NÃO pode importar dentro do document, porque o _document não tá pronto ainda para compilar css


## COMPONENTES E PÁGINAS
-- Componente Header
. O Next, nas páginas, nos obriga a utilizar o default para exportação, mas no caso dos componentes não iremos utilizar.
. O header fica por volta de tudo, já o div fica por volta do conteúdo "dentro" do header.
. As imagens no Next fica sempre dentro da pasta public, importando com o esquema padrão de '/'.
. Como o Header aparecerá em todas as páginas da aplicação, é de se colocar no arquivo _app.tsx

-- Componente SignIn 
. É interessante fazer outro arquivo, pois o seu funcionamento 'não interfere' no restante dos componentes do Header. 
Seu comportamento é isolado. Ao mudar, ele precisa ser renderizado novamente. Se ele estivesse conectado ao restante,
todos precisariam recarregar. 
. yarn add react-icons (utilizar o font awesome)
. A estilização da margin (left) do botão é no componente Header, pois ele está relacionado com os componentes desse componente
e não solto pela aplicação.

-- Página Home
. O botão subscribe now também será feito em um componente separado, porque terá conexão 
com o stripe para pagamentos e tudo mais, então com esse commit foi concluída a página home da
aplicação

-- Subscribe Button
. É o contexto que define os espaçamentos dentro dos elementos dentro dele.


## INTEGRAÇÃO COM API (STRIPE)
-- Configurando Stripe 
. Plataforma para pagamentos com cartão de crédito, com ambiente de homolagação bem rápido.
. A publishable key (desenvolvedores - chaves da API) é uma chave que é utilizada quando precisamos interagir com a 
API do stripe através do nosso frontend (para informações públicas)
. A secret key é [obviamente privada], com isso, caso em mãos erradas, a pessoa pode fazer de tudo na conta stripe,
até deletar os dados gerais da conta, por exemplo.

. .env.local - arquivo de variáveis ambiente, variáveis que são diferentes de acordo com o ambiente que a aplicação está 
rodando. Online, em testes, variando. 

-- Consumindo API do Stripe (SSR - Server-side Rendering)
. Realizar a primeira chamada pra API do Stripe, para obter as infos do produto que criamos.
. Ao usuário clicar em subscribe, eu preciso ter a referência de qual produto eu quero inscrever o usuário. Buscar esse
produto assim que a página for renderizada. (layout shit - mudança de layout que pode ser percebida pelo usuário)
. Quando eu quero fazer uma chamada API via SSR e não no Cliente Side R., dentro de uma página do Next (eu preciso repassar a informação 
da página AO componente)
. O nome da função PRECISA ser getServerSideProps, não pode ser de outra forma. Foi escrita em formato de const, porque dentro
do Next conseguimos importar uma tipagem para essa função, chamada getServerSideProps
. Se retornarmos/passarmos uma propriedade (por exemplo: props { nome: 'Fulano'}), conseguimos acessar o nome do usuário 
através das props na Home, (console.log)
. Se o console.log estivesse dentro do getServerSideProps, não aparecerá na tela, porque o getServerSideProps é executado
na camada do servidor Node - Next -, e não no browser. Aparecerá, portanto, no console.

. Para começarmos, e fazer a chamada para a API do Stripe, adicionando ela portanto na aplicação [yarn add stripe]
. Com isso, criando uma página services, com um arquivo stripe.ts dentro, arquivo que vai definir a conexão com o Stripe

. A partir disso, vamos utilizar essa API do Stripe para fazer uma requisição (index.tsx): https://stripe.com/docs/api/customers/list?lang=node
await stripe.prices.retrieve() o retrieve é porque é apenas um preço, dai ali dentro vamos passar o id do preço -> indo 
no produtos do stripe, clicar no próprio produto e copiar o api_id do PRICE, não do PRODUCT.
. Em seguida passamos outro argumento chamado expand['product'], pois queremos as informações do produto. Pode-se analisar
pela documentação aqui: https://stripe.com/docs/api/prices/retrieve.
. A criação da const product (produto) é para nos fornecer os dados que precisamos do produto. O link acima mostra o nome
das respostas.
. Com isso, podemos passar nosso produto na página. Contudo, antes, precisamos tipar a Home, falando as propriedades que
ele recebe. 
Show, com isso, podemos colocar o amount do produto diretamente no span.
. Agora, vale formatar o número do preço, para ficar com a sigla da moeda e tudo mais.

. Ok, agora, precisaremos do PriceId que sobrou la no SubscribeButton, passando ele no SubscribeButton da Homepage
. Como não iremos utilizar os dados do produto no momento, podemos excluir ,{expand: ['product']} do const price. Se quisermos
mostrar o nome do produto, descrição dele e tudo mais, só fazer isso. Daí, dentro do price vai ter o nome do produto e tudo mais
price.product.blabla

-- Static Site Generation (SSG)
. Se 1 milhão de usuários acessarem a página, 1 mi de vezes irá acontecer a chamada para o stripe e tudo mais. Como só estamos
buscando o preço dos produtos e ele varia geralmente de mês em mês (no máx a cada 24hs), podemos usar o SSG para enviar
o HTML estático já pronto para o usuário.
. Com isso, podemos mudar de getServerSideProps para getStaticProps (index.tsx). O conteúdo é o mesmo para todos os usuários
que irão logar. Portanto, se tiver uma mensagem com "Olá Fulano", todos irão ler, mesmo quem se chama 'Ciclano'.
. 3 principais formas de fazer uma chamada: 
    Client-side
    Server-side
    Static Site Generation
. Um bom exemplo foi: Para uma post de Blog por exemplo
    Conteúdo (SSG)
    Comentários (Client-side)

------------------------------------------BACKEND NO FRONTEND----------------------------------------------------------------------------------------------------------------------
## API ROUTES NO NEXT.JS
-- API routes no Next.js
. File System Rooting, os arquivos dentro de pages viram páginas na nossa aplicação, menos o _app e _document.
. Todos os arquivos que criarmos dentro dessa pasta api (criada dentro de pages), virarão rotas na nossa aplicação. 
Cada arquivo vai se tornar numa rota do nosso backend (trazendo informações para a gente)
. Como não irão mostrar componentes, podemos escrever com a extensão ts e não tsx.
. Dentro das funções geralmente se recebem 2 parâmetros, request e response. O request são todos os dados da nossa requisição
Criando um dado de usuário, dentro do request teremos os dados dele. O response é, claro, a resposta. Se estamos querendo
a listagem de usuário, a resposta é uma listagem de usuário (do formato JSON).

-- Estratégias de autenticação
. Métodos de autenticação disponíveis no Next: JWT (Storage) / Next Auth (Social) / Cognito, Auth0
. Nessa aplicação, será utilizado o modelo Next Auth, já tem suporte para fazer autenticação com o GitHub de forma simples
e login de forma automática e mais fácil.
. Documentação: https://next-auth.js.org/providers/github

-- Parametrização nas rotas
. Para uma rota em que se possa receber parâmetros, como nessa aplicação buscar o usuário pelo Id, podemos colocar o nome
do arquivo como [id].tsx
. //localhost:3000/api/users/1, retorna no console os parâmetros
. Com o spread operator nos params, a partir do console.log(request.query), tudo passado após o users, vai vir dentro do
request.query
. Esse método é muito utilizado para fazer a integração com alguma coisa terceira. Para fazer a autenticação, é importante
para não precisar fazer vários tipos de rotas diferentes (um arquivo para cada tipo de autenticação)

-- Autenticação com Next Auth
. Seguindo o guia da documentaçã: https://next-auth.js.org/providers/github && https://next-auth.js.org/getting-started/example
. Foi feito o código para adicionar API route, e com isso precisamos instalar o next auth [yarn add next-auth]
[yarn add @types/next-auth -D] se necessário para as tipagens.
. Para integrar o GitHub na nossa aplicação é preciso de duas infos de lá, clientId e clientSecret. É preciso criar isso
no GitHub
Settings - Developer Settings - OAuth Apps , e ao criar a aplicação, teremos o GITHUB_CLIENT_ID e GITHUB_CLIENT_SECRET para 
utilizar na aplicação. (env.local)

. No escopo (scope), temos a documentação: https://docs.github.com/pt/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps
Como queremos as informações básicas dos usuários, podemos utilizar a read:users
. No SignInButton, que é o componente que precisamos fazer a autenticação, nós iremos importar a função signIn, que faz
essa autenticação do usuário, e ela recebe por parâmetro qual tipo de autenticação a gente quer utilizar e, portanto,
passaremos 'github'.

. Vamos utilizar também um hook chamado useSession, que retorna informações se o usuário tem uma sessão ativa ou não, ou seja,
se ele ta logado ou não.
Como ele retorna várias coisas, vamos desestruturar e buscar a session.


## USANDO FAUNADB
-- Escolhendo um banco de dados
. Assim que o usuário loga no nosso app, precisamos salvar algumas informações desse usuário em um banco de dados. Isso
porque, precisamos saber qual usuário se inscreveu no stripe, quem fez o pagamento e tudo mais.

-- Configurando FaunaDB
. Quando criar uma key nova no banco de dados, é importante criar uma "Role" nova apenas com as permissões que aquela
role possa ter acesso. 
. Quando necessário buscar um usuário através de algum atributo específico, podemos criar um índice. Isso torna a aplicação
mais performática.
Nos termos da index (ex.: user_by_email), chamaremos o Terms [termo] de data.email, isto é, todos os dados de um registro
que fizermos no banco de dados, ficarão dentro de uma chave no documento chamada data.

. instalação do FaunaDB na aplicação - [yarn add faunadb] e criando um arquivo services fauna.ts
. TODAS AS OPERAÇÕES que eu fizer no banco de dados, ou no stripe ou em qualquer coisa, que precisam ter acesso a chave
secreta (FAUNADB_KEY), elas NÃO podem ser feitas pelo lado do browser (operações de consulta no banco dentro de um componente,
useEffect (ou quando o usuário clicar em um botão)). Elas só podem ser feitas dentro das minhas APIs routes (Pasta API - rotas 
backend, podemos dizer assim), ou por dentro dos métodos getStaticProps || getServerSideProps.

-- Configurando no GitHub
. É bom ter um email público na conta do GitHub.

-- Salvando usuário no banco
. Salvar o usuário assim que ele fizer login na aplicação.

. Com isso, https://next-auth.js.org/configuration/callbacks callbacks são funções que são executadas de forma automática pelo
NextAuth assim que acontece alguma ação (por exemplo, sempre que o usuário faz login na aplicação, tem uma função signIn)
que é executada.
. Show, dando um console.log (no [...nextauth]), podemos ver que estamos recebendo os dados do usuário e, com isso, iremos
salvar no banco de dados do fauna através do Client que fora configurado no fauna.ts
. Na criação, o 'data' são os dados do usuário que a gente quer inserir.

. Caso o usuário já tenha sido criado, podemos atualizar os seus dados ou apenas não fazer nada.

-- Verificação usuário duplicado
. Se não existe um usuário ao qual Match (Where no banco de dados) [If.Not.Exists.Match]


## PAGAMENTOS NO STRIPE
-- Gerando sessão de checkout
. 'checkoutsession' é basicamente uma URL que a gente vai redirecionar o usuário, que vai preencher as infos de pagamento
e, posteriormente, ser redirecionado de volta para a página da aplicação.
. Criando uma função de inscrição no SubscribeButton, primeiro precisamos ver se o usuário tem uma 'sessão' ativa, se 
não, precisa realizar o login no GitHub com o método signIn
    Caso ele esteja logado, será feita a criação da checkout session

. Caso queira deixar uma variável ambiente pública no Next, precisamos criá-la com o prefixo NEXT_PUBLIC

. Para a inscrição, será criada uma rota API chamada subscribe.ts
. res.setHeader('Allow', 'POST') explica ao frontend que o método que essa rota aceita é POST
. billing_address_collection fala se queremos obrigar o usuário a preencher o endereço, ou deixar para o stripe 'resolver'
. success e cancel_url é interessante colocar sempre em formato de variável ambiente, pelo .env.local

. Como hoje o NextAuth salva o token do usuário logado dentro dos cookies dentro da nossa aplicação (os cookies podem ser
acessados tanto no frontend quanto na camada backend, se estando no mesmo domínio). Com isso, conseguiremos acessar
o token do usuário através de req.cookies. 
    Como queremos o usuário em si e não só os cookies: const session = await getSession({ req }) do método getSession

-- Redirecionando para o Stripe
. Quando o usuário clicar em subscribe, nós precisamos chamar a API route que criamos no subscribe (rotas do backend do Next)
Primeiro, nós precisamos de uma forma de comunicar o frontend com essas api routes. Como é uma rota do tipo POST, precisamos
acessá-la via fetch ou axios. Utilizaremos o axios [yarn add axios]
. Criar um arquivo chamado api.ts, importando o axios from 'axios'
Ao emitirmos a url (colocando apenas a baseURL como '/api'), o axios irá aproveitar a url que já existe da aplicação

. Fazer um trycatch no subscribeButton para ter uma tratativa de erro
const response await api.post('/subscribe') o nome do arquivo é o nome da rota, por isso subscribe
SESSIONID é o id da sessão que foi criada.

. Criação do serviço stripe-js.ts para integração do stripe com o Browser (parte frontend); adicionar com isso uma outra
biblioteca chamada [yarn add @stripe/stripe-js]
   Nesse arquivo, precisamos passar a chave pública do Stripe --> Developers / API Key / publishable key

. Para não dar erro no session.user.email, é preciso dar um [yarn add next] e configurar uma NEXTAUTH_SECRET=blablabla no env.local.

-- Evitando duplicação no Stripe
. Para evitar que nosso usuário saia duplicado, nós iremos utilizar nosso banco de dados dentro do FaunaDB. Quando criarmos
o usuário pela primeira vez, vamos salvar o id dele no stripe, junto com as informações já presentes no faunaDB. Dai,
quando voltarmos de novo para a rota do subscribe, vamos verificar se o usuário já tem um id do stripe atribuído a ele.

. Dar uma olhada na documentação: https://docs.fauna.com/fauna/current/api/fql/functions/update?lang=javascript. Ref é o id do usuário
  Não conseguimos atualizar o funcionário diretamente através do id. Por isso, iremos dividir em 2 query's (subscribe.ts)


## OUVINDO WEBHOOKS
- Webhooks do Stripe
. Basicamente é um pattern muito utilizado para integração entre sistemas na web. Uma aplicação terceira avisa nossa
aplicação que algum evento aconteceu, por uma rota http na maioria das vezes.
  Por exemplo: avisar à rota http://localhost:3000/api/stripe/webhooks que o cartão do cliente tal deu tal problema.
 
. O Stripe tem um modelo de webhooks próprio: https://dashboard.stripe.com/test/webhooks
. Stripe CLI é uma interface de linha de comando (software que executamos no terminal), que consegue ficar observando/ouvindo
os webhooks do stripe e encaminhando para o nosso localhost.
. Para download do Stripe CLI, seguir o passo a passo no terminal da aplicação (UBUNTU), seguindo o passo 1 da documentação:
https://stripe.com/docs/stripe-cli 
Após isso, dar um [stripe login] entrar no link e permitir autorização. Por fim: [stripe listen --forward-to localhost:3000/api/webhooks]


-- Ouvindo eventos do Stripe
. Quando o stripe envia os webhooks, ele envia em formato de streaming, isto é, os dados não estão prontos todos de uma vez,
a gente recebe eles por partes. Vamos, com isso, torná-los 'legíveis'
import { Readable } from "stream";
. Vamos criar uma função que converte essa readable stream em uma string/um objeto/uma requisição em si.

. Função chamada buffer que recebe uma readable stream; ela cria uma array chamado chunks, que são os pedaços da stream;
E ela vai percorrendo para cada vez que a gente receber um valor da requisição, ele vai armazenando esse valor dentro de 
chunks. No final, todos os chunks são concatenados e transformados em um Buffer (amortecedor/parachoque)
. O req é um readable por padrão, por isso podemos passar ele dentro da função
  Temos dentro do buf agora a nossa requisição em si!

. É importante passar o config com bodyParser: false, porque o next tem um formato de entender a requisição (vindo como JSON
ou formulário. Só que como nesse caso está vindo como uma readable, precisamos desabilitar a configuração padrão do Next)


-- Salvando dados do evento
. Como vamos ouvir mais de um evento na aplicação, vamos trocar o console.log para um switch, dentro do webhook.

. Criar uma pasta _lib dentro de api. Toda pasta que tem _ na frente, ela não é tratada com uma rota na aplicação. 
Nela, vamos criar um arquivo chamado manageSubscription, com uma função que irá salvar as informações no banco de dados.
. Para buscar um usuário pelo stripe_customer_id, é preciso criar um índice: user_by_stripe_customer_id no faunaDB. Com isso,
agora podemos buscar um usuário, pelo id dele, dentro do stripe.
. Para o manageSubscription:
    // Buscar o usuário no banco do FaunaDB, com o ID {customerId --> stripe_customer_id}   
    // Salvar os dados da subscription do usuário no FaunaDB
    // Dai com isso, teremos uma nova collection no banco, com as subscriptions dos usuários

-- Ouvindo mais eventos
. manageSubscription e webhooks // alterações no commit


------------------------------------------FRONTEND JAMStack----------------------------------------------------------------------------------------------------------------------
##TRABALHANDO COM CMS 
-- Escolhendo um CMS
. JAMStack : JavaScript API Markup
 // Vamos utilizar nessa aplicação o prismic.io

 -- Configurando Prismic CMS
. Após logar a conta e criar um repositório, passar em "Settings" para o modo legacy do prismic, que é o layout anterior e 
que foi utilizado pelo Diego durante as aulas.
. Ao adicionar um post, do tipo Repeatable type, podemos arrastar os campos que queremos ter nos nossos posts.

. Depois da realização dos posts, temos que configurar o prismic para conseguirmos acessas o conteúdo através da aplicação
Settings --> API & Security --> Mudar o API access para 'Private API' (pois nosso blog é para assinantes)
Ao criar um Access Token e dando um Add this application, teremos o Permanent access token , QUE É O QUE IREMOS PRECISAR 
PARA ACESSAR OS CONTEÚDOS DO PRISMIC

-- Página: Posts


